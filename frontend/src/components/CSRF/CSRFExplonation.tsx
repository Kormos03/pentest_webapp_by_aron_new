import './CSRF_CSS.css';

export function CSRFExplonation() {
    return (
        <>
                <div className="csrf-container">
            <h1>What is Cross-Site Request Forgery (CSRF)?</h1>
            <p>
                Cross-Site Request Forgery, commonly known as CSRF, is a type of security vulnerability found in web applications.
                It occurs when an attacker tricks a user into performing actions on a web application where they are authenticated.
                This type of attack can lead to unauthorized actions being performed on behalf of the user, such as changing account details or making transactions.
            </p>

            <h2>How Does CSRF Work?</h2>
            <p>
                Imagine you are logged into your bank account in one browser tab. In another tab, you visit a malicious website. This malicious website tricks your browser into making a request to your bank, like transferring money, without your knowledge. Since you are already logged in, the bank thinks the request is legitimate and processes it. This is called Cross-Site Request Forgery (CSRF).
            </p>

            <h2>Why is CSRF Dangerous?</h2>
            <p>
                CSRF can make you perform actions you didn’t intend to, like changing your password or transferring money. It exploits the trust that a website has in your browser.
            </p>

            <h2>How to Prevent CSRF?</h2>
            <ul>
                <li><strong>CSRF Tokens:</strong> Websites use special tokens that are unique to each session. The token must be included in requests to verify they are legitimate.</li>
                <li><strong>SameSite Cookies:</strong> Cookies can be set to only be sent with requests from the same site, preventing cross-site requests.</li>
                <li><strong>Referer Header Check:</strong> Validate the referer header to ensure the request is coming from a trusted source.</li>
                <li><strong>Double Submit Cookies:</strong> Send a CSRF token both as a cookie and as a request parameter, and verify that they match on the server side.</li>
            </ul>

            <h2>Example of a CSRF Attack</h2>
            <p>
                Here’s a simple analogy:
            </p>
            <ul>
                <li><strong>You:</strong> Logged into your bank.</li>
                <li><strong>Attacker:</strong> Sends you a link to a malicious website.</li>
                <li><strong>Malicious Website:</strong> Sends a hidden request to your bank to transfer money.</li>
                <li><strong>Bank:</strong> Processes the request because you are logged in.</li>
            </ul>

            <h2>Real-World Implications of CSRF</h2>
            <ul>
                <li><strong>Unauthorized Transactions:</strong> An attacker can make unauthorized transactions on behalf of the user.</li>
                <li><strong>Changing Account Details:</strong> An attacker can change the user's account details, such as email or password.</li>
                <li><strong>Posting on Behalf of the User:</strong> An attacker can post messages or comments on behalf of the user.</li>
            </ul>

            <h2>Conclusion</h2>
            <p>
                CSRF is a serious security vulnerability that can lead to unauthorized actions being performed on behalf of the user. Understanding how CSRF works and how to prevent it is essential for anyone involved in web development or cybersecurity.
            </p>
            <a href="https://owasp.org/www-community/attacks/csrf">For further information</a>
            </div>
        </>
    );
}
    